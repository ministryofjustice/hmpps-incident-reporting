import type { AnswerConfiguration, QuestionConfiguration } from './types'
import type { Question } from '../incidentReportingApi'

export function conditionalFieldName(
  question: QuestionConfiguration | Question,
  answer: AnswerConfiguration,
  suffix: 'comment' | 'date',
): string {
  return `${question.code}-${answer.code}-${suffix}`
}

/**
 * Used to parse field name/ids as generated by `conditionalFieldName`.
 */
export function parseFieldName(
  fieldName: string,
):
  | null
  | { questionCode: string }
  | { questionCode: string; responseCode: string; conditionalField: 'comment' | 'date' } {
  const parts = fieldName.split('-')

  if (parts.length === 1) {
    const [questionCode] = parts
    if (questionCode) {
      return { questionCode }
    }
  }

  if (parts.length === 3) {
    const [questionCode, responseCode, conditionalField] = parts
    if (questionCode && responseCode && (conditionalField === 'comment' || conditionalField === 'date')) {
      return { questionCode, responseCode, conditionalField }
    }
  }

  return null
}

/** Finds the Answer config for a given response (e.g. 'YES') */
export function findAnswerConfigByResponse(
  response: string,
  questionConfig: QuestionConfiguration,
  mustBeActive = true,
): AnswerConfiguration {
  return questionConfig.answers.find(
    answerConfig => (answerConfig.active || !mustBeActive) && answerConfig.response === response.trim(),
  )
}
